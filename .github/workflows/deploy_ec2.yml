name: Deploy to EC2

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4

      - name: 設定 Node.js 環境
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: 快取 node_modules
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-node-modules-

      - name: 安裝相依套件
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: 建置 NestJS 應用程式
        run: npm run build

  Push:
    if: github.event_name == 'push'
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4

      - name: 設定 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登入 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: 建置並推送 Docker 映像檔
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/stock-bot:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/stock-bot:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/stock-bot:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/stock-bot:buildcache,mode=max

  Deploy:
    if: github.event_name == 'push'
    needs: Push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4

      - name: 準備部署檔案
        run: |
          mkdir -p artifacts
          cp docker-compose.yml artifacts/
          cp .env.example artifacts/.env || true
          
      - name: 壓縮部署封包
        run: tar -czf deploy.tar.gz -C artifacts .

      - name: 上傳至 EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy.tar.gz"
          target: "~/"

      - name: 部署到 EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          command_timeout: "10m"
          script: |
            set -e
            mkdir -p ~/deploy
            tar -xzf ~/deploy.tar.gz -C ~/deploy
            cd ~/deploy
            echo "停止並移除現有容器..."
            sudo docker-compose down || true
            echo "清理未使用的容器和映像檔..."
            sudo docker container prune -f
            sudo docker image prune -f
            echo "拉取最新映像檔..."
            sudo docker-compose pull
            echo "啟動服務..."
            sudo docker-compose up -d
            echo "檢查服務狀態..."
            # 使用循環檢查服務，最多等待2分鐘
            MAX_ATTEMPTS=12
            ATTEMPT=0
            while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
              if sudo docker-compose ps | grep -q "Up"; then
                echo "服務已成功啟動!"
                sudo docker-compose ps
                exit 0
              fi
              echo "等待服務啟動中... ($(($ATTEMPT+1))/$MAX_ATTEMPTS)"
              sleep 10
              ATTEMPT=$(($ATTEMPT+1))
            done
            echo "服務啟動超時，顯示日誌："
            sudo docker-compose logs
            exit 1