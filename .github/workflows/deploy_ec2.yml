name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: Install dependencies
        run: npm install

      - name: Write .env file
        run: |
          cat << EOF > .env
          DB_TYPE=${{ secrets.DB_TYPE }}
          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_PORT=${{ secrets.MYSQL_PORT }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          CHANNEL_ACCESS_TOKEN=${{ secrets.CHANNEL_ACCESS_TOKEN }}
          CHANNEL_SECRET=${{ secrets.CHANNEL_SECRET }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_BOT_WEBHOOK_DOMAIN=${{ secrets.TELEGRAM_BOT_WEBHOOK_DOMAIN }}
          TELEGRAM_BOT_WEBHOOK_PATH=${{ secrets.TELEGRAM_BOT_WEBHOOK_PATH }}
          TELEGRAM_BOT_SECRET_TOKEN=${{ secrets.TELEGRAM_BOT_SECRET_TOKEN }}
          IMGUR_CLIENT_ID=${{ secrets.IMGUR_CLIENT_ID }}
          EOF

      - name: Verify .env file
        run: |
          echo "Verifying .env file contents:"
          cat .env | sed 's/=.*$/=*** (hidden)/'

            - name: Build NestJS app
              run: npm run build

  Deploy:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract repository name
        run: |
          REPO_NAME=${{ github.repository }}
          REPO_NAME=${REPO_NAME##*/}
          echo "Repository name: $REPO_NAME"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/$REPO_NAME:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/$REPO_NAME:latest

      - name: Execute remote SSH commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            REPO_NAME=${{ github.repository }}
            REPO_NAME=${REPO_NAME##*/}
            if [ -z "$REPO_NAME" ]; then
              echo "Error: REPO_NAME is empty"
              exit 1
            fi

            if sudo docker ps -a --format '{{.Names}}' | grep -q "^$REPO_NAME$"; then
              echo "Stopping and removing container: $REPO_NAME"
              sudo docker stop $REPO_NAME || true
              sudo docker rm $REPO_NAME || true
              sudo docker rmi -f ${{ secrets.DOCKER_HUB_USERNAME }}/$REPO_NAME:latest || true
            else
              echo "Container $REPO_NAME does not exist, skipping stop/remove."
            fi

            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/$REPO_NAME:latest
            sudo docker run -d --name $REPO_NAME --restart=unless-stopped -p 3000:3000 ${{ secrets.DOCKER_HUB_USERNAME }}/$REPO_NAME:latest

